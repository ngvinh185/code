Số hoàn hảo là số có tổng các ước thực sự (Không tính chính nó) bằng chính số đó. Cho một số nguyên dương n, kiểm tra xem n có phải là số hoàn hảo hay không.

Định lý Euclid - Euler :' Nếu p là số nguyên tố và 2^p - 1 cũng là số nguyên tố thì : 2^(p-1) * (2^p - 1) sẽ tạo thành 1 số hoàn hảo. Ví dụ p = 2, 2^2 - 1 = 3, 2 * 3 = 6 => HH Ví dụ p = 3, 2^3 - 1 = 7, 4 * 7 = 28 => HH


Input Format

Số nguyên dương N

Constraints

1≤N≤9*10^18

Output Format

In YES nếu N là số hoàn hảo, ngược lại in NO

Sample Input 0

28
Sample Output 0

YES
Explanation 0

28 có các ước thực sự là 1, 2, 4, 7, 14 có tổng bằng 28.
#include<bits/stdc++.h>

using namespace std;
using ll=long long ;
int nt(ll n){
    if (n<2) return 0;
    for (int i=2;i<=sqrt(n);i++){
        if (n%i==0) return 0;
    }
    return 1;
}
int sodep(ll n){
    for (int p=2;p<33;p++){
        if(nt(p) && nt(pow(2,p)-1)){
            ll kq=pow(2,p-1) * (pow(2,p)-1);
            if (kq==n) return 1;
        }
    }
    return 0;
}
int main(){
    ll n;
    cin>>n;
    if (sodep(n)) cout<<"YES";
    else cout<<"NO";
}
    
